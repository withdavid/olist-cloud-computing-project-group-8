steps:
  # Etapa 1: Construir a imagem do Docker para ms_customers usando docker-compose
  - name: 'docker/compose:1.29.2'
    args: ['-f', 'src/ms_customers/docker-compose.yml', 'build', '--no-cache', '--force-rm']

  # Etapa 2: Tag da imagem ms_customers para o Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'ms_customers-api:latest', 'us-west1-docker.pkg.dev/computacaonuvem-415719/olist-cloud/ms_customers_api:latest']

  # Etapa 3: Push da imagem ms_customers para o Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-west1-docker.pkg.dev/computacaonuvem-415719/olist-cloud/ms_customers_api:latest']

  # Etapa 4: Construir a imagem do Docker para ms_products usando docker-compose
  - name: 'docker/compose:1.29.2'
    args: ['-f', 'src/ms_products/docker-compose.yml', 'build', '--no-cache', '--force-rm']

  # Etapa 5: Tag da imagem ms_products para o Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'ms_products-api:latest', 'us-west1-docker.pkg.dev/computacaonuvem-415719/olist-cloud/ms_products_api:latest']

  # Etapa 6: Push da imagem ms_products para o Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-west1-docker.pkg.dev/computacaonuvem-415719/olist-cloud/ms_products_api:latest']

  # Etapa 7: Construir a imagem do Docker para ms_orders usando docker-compose
  - name: 'docker/compose:1.29.2'
    args: ['-f', 'src/ms_orders/docker-compose.yml', 'build', '--no-cache', '--force-rm']

  # Etapa 8: Tag da imagem ms_orders para o Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'ms_orders-api:latest', 'us-west1-docker.pkg.dev/computacaonuvem-415719/olist-cloud/ms_orders_api:latest']

  # Etapa 9: Push da imagem ms_orders para o Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-west1-docker.pkg.dev/computacaonuvem-415719/olist-cloud/ms_orders_api:latest']

  # Etapa 10: Aplicar os manifests gerais no Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-west1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=autopilot-cluster-1'

  # Etapa 11: Aplicar os manifests específicos do ms_customers no Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'src/ms_customers/k8s/']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-west1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=autopilot-cluster-1'

  # Etapa 12: Aplicar os manifests específicos do ms_products no Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'src/ms_products/k8s/']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-west1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=autopilot-cluster-1'

  # Etapa 13: Aplicar os manifests específicos do ms_orders no Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'src/ms_orders/k8s/']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-west1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=autopilot-cluster-1'

options:
  logging: CLOUD_LOGGING_ONLY
